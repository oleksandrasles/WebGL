

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
varying vec3 v_Vertex;
varying vec3 v_Normal;
void main() {
    v_Vertex = mat3(ModelViewProjectionMatrix)*vertex;
    v_Normal = normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 v_Vertex;
varying vec3 v_Normal;
uniform vec3 diffuseColor;
void main() {
    vec3 N = normalize(v_Normal);
    vec3 L = vec3(1.0,0.,1.);
    float lambertian = max(dot(N,L), 0.0);
    float specular = 0.0;
    if (lambertian > 0.0){
        vec3 R = reflect(-L, N);
        vec3 V = normalize(-v_Vertex);
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 10.0);
    }
    vec3 ambientColor = vec3(0.1);
    vec3 specularColor = vec3(1);
    gl_FragColor = vec4(v_Normal,1.0);
    gl_FragColor = vec4(ambientColor + lambertian * color.xyz + specular * specularColor, 1.0);
}`;