

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix;
varying vec2 v_Texture;
uniform vec2 pModelT;
uniform float r;

mat4 translation(vec2 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 rotation(float angleInRadians) {
    mat4 dst;
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);

    dst[0][0] = c;
    dst[0][ 1] = s;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = -s;
    dst[1][ 1] = c;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
    vec4 m1= translation(-pModelT)*vec4(texture,0.,1.);
    vec4 m2= rotation(r)*m1;
    vec4 m3= translation(pModelT)*m2;
    v_Texture = m3.st;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec2 v_Texture;
uniform sampler2D tmu;
void main() {
    vec4 colorT = texture2D(tmu, v_Texture);
    gl_FragColor = colorT;
    if(color.a<0.0){
        gl_FragColor = vec4(1.0);
    }
}`;